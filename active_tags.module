<?php
// $Id$

/**
 * @file
 *  Active Tags widget for free tagging taxonomies
 */

/**
 * Attaches active_tags widget to fields.
 *
 * @param $field_ids
 *  mixed - Either a single field id or an array of ids.
 */
function active_tags_enable_widget($field_ids) {
  static $set_ids = array();
  // Load id into array if a string is passed in.
  if ($field_ids && !is_array($field_ids)) {
    $field_ids = array($field_ids);
  }
  // Ensure we are only adding each setting once.
  // This is important when previewing a node.
  foreach ($field_ids as $id) {
    if (!in_array($id, $set_ids)) {
      $ids[] = $id;
      $set_ids[] = $id;
    }
  }
  if (!empty($ids)) {
    drupal_add_css(drupal_get_path('module', 'active_tags') .'/active_tags.css', 'module');
    drupal_add_js(array('active_tags' => $ids), 'setting');
    drupal_add_js(drupal_get_path('module', 'active_tags') .'/active_tags.js', 'module', 'footer');
  }
}


/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */


/**
 * Implements hook_field_widget_info().
 */
function active_tags_field_widget_info() {
  return array(
    'active_tags_taxonomy_autocomplete' => array(
      'label' => t('Active Tags autocomplete term widget (tagging)'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'size' => 60,
        'autocomplete_path' => 'taxonomy/autocomplete',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function active_tags_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $tags = array();
  foreach ($items as $item) {
    $tags[$item['tid']] = isset($item['taxonomy_term']) ? $item['taxonomy_term'] : taxonomy_term_load($item['tid']);
  }
  //dpm($element);

  $element += array(
    '#type' => 'textfield',
    '#default_value' => taxonomy_implode_tags($tags),
    '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $field['field_name'],
    '#size' => $instance['widget']['settings']['size'],
    '#maxlength' => 1024,
    '#element_validate' => array('taxonomy_autocomplete_validate'),
    '#field_prefix' => theme('active_tags_term_list_remove', array('terms' => $tags)),
  );

  drupal_add_css(drupal_get_path('module', 'active_tags') . '/active_tags.css');

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function active_tags_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_theme().
 */
function active_tags_theme($existing, $type, $theme, $path) {
  return array(
    'active_tags_term_list_remove' => array(
      'variables' => array('terms' => NULL),
    ),
    'active_tags_term_list_add' => array(
      'variables' => array('terms' => NULL),
    ),
  );
}

/**
 * Theme a list of taxonomy terms with remove action.
 */
function theme_active_tags_term_list_remove($variables) {
  $output = '<div class="at-term-list">';
  foreach ($variables['terms'] as $term) {
    // @todo add field level id for div id to prevent collisions.
    $output .= '<div id="at-term-' . $term->tid . '" class="at-term"><span class="at-term-text">' . $term->name . '</span><span class="at-term-remove">x</span></div> ';
  }
  $output .= '</div>';
  return $output;
}

/**
 * Theme a list of taxonomy terms with remove action.
 */
function theme_active_tags_term_list_add($variables) {
  $output = '';
  foreach ($variables['terms'] as $term) {
    $output .= '<div id="at-term-' . $term->tid . '" class="at-term"><span class="at-term-text">' . $term->name . '</span><span class="at-term-remove">x</span></div> ';
  }
  return $output;
}
